pipeline {
    agent any
    
    environment {
        DJANGO_SETTINGS_MODULE = 'myproject.settings'
        PYTHONPATH = "${WORKSPACE}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo '–ö–æ–¥ –ø–æ–ª—É—á–µ–Ω –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è'
            }
        }
        
        stage('Setup Python Environment') {
            steps {
                echo '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Python –æ–∫—Ä—É–∂–µ–Ω–∏—è'
                bat '''
                    python --version
                    pip --version
                '''
            }
        }
        
        stage('Install Dependencies') {
            steps {
                echo '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π'
                bat '''
                    pip install -r requirements.txt
                '''
            }
        }
        
        stage('Database Setup') {
            steps {
                echo '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö'
                bat '''
                    python manage.py makemigrations --noinput
                    python manage.py migrate --noinput
                '''
            }
        }
        
        stage('Run Tests') {
            steps {
                echo '–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤'
                bat '''
                    python manage.py test --verbosity=2
                '''
            }
            post {
                always {
                    echo '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ'
                }
                success {
                    echo '–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!'
                }
                failure {
                    echo '–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏'
                }
            }
        }
        
        stage('Code Quality Check') {
            steps {
                echo '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞'
                bat '''
                    python -m py_compile manage.py
                    python -m py_compile blog/models.py
                    python -m py_compile blog/views.py
                    python -m py_compile blog/tests.py
                '''
            }
        }
        
        stage('Build Documentation') {
            steps {
                echo '–°–±–æ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏'
                bat '''
                    echo "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞:" > build_info.txt
                    echo "–ü—Ä–æ–µ–∫—Ç: Django Blog Application" >> build_info.txt
                    echo "–í–µ—Ç–∫–∞: ${env.BRANCH_NAME}" >> build_info.txt
                    echo "–ö–æ–º–º–∏—Ç: ${env.GIT_COMMIT}" >> build_info.txt
                    echo "–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏: %DATE% %TIME%" >> build_info.txt
                '''
            }
        }
        
        stage('Deploy to Development') {
            when {
                branch 'dev'
            }
            steps {
                echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Development –æ–∫—Ä—É–∂–µ–Ω–∏–µ'
                bat '''
                    echo "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
                    
                    REM –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ dev –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                    docker-compose -f docker-compose.dev.yml down --remove-orphans
                    
                    REM –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π dev –æ–±—Ä–∞–∑
                    docker-compose -f docker-compose.dev.yml build --no-cache
                    
                    REM –ó–∞–ø—É—Å–∫–∞–µ–º dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                    docker-compose -f docker-compose.dev.yml up -d
                    
                    REM –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
                    timeout /t 10 /nobreak
                    
                    REM –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                    docker-compose -f docker-compose.dev.yml ps
                    
                    REM –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ dev
                    docker-compose -f docker-compose.dev.yml exec -T web python manage.py migrate --noinput
                    
                    REM –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ dev
                    docker-compose -f docker-compose.dev.yml exec -T web python manage.py collectstatic --noinput
                    
                    REM –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è dev
                    docker-compose -f docker-compose.dev.yml exec -T web python manage.py shell -c "from django.contrib.auth.models import User; User.objects.create_superuser('dev_admin', 'dev@example.com', 'dev123') if not User.objects.filter(username='dev_admin').exists() else print('Dev —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')"
                    
                    echo "‚úÖ –î–µ–ø–ª–æ–π –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω!"
                    echo "üåê Dev —Å–µ—Ä–≤–µ—Ä: http://localhost:8001"
                    echo "üë§ Dev –∞–¥–º–∏–Ω: dev_admin/dev123"
                '''
            }
            post {
                success {
                    echo '‚úÖ –î–µ–ø–ª–æ–π –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!'
                }
                failure {
                    echo '‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ dev –æ–∫—Ä—É–∂–µ–Ω–∏–µ!'
                    echo '–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º dev –∏–∑–º–µ–Ω–µ–Ω–∏—è...'
                    bat '''
                        docker-compose -f docker-compose.dev.yml down
                        docker-compose -f docker-compose.dev.yml up -d
                    '''
                }
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                echo 'üöÄ –î–µ–ø–ª–æ–π –≤ Production –æ–∫—Ä—É–∂–µ–Ω–∏–µ'
                bat '''
                    echo "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ..."
                    
                    REM –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
                    docker-compose down --remove-orphans
                    
                    REM –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑
                    docker-compose build --no-cache
                    
                    REM –ó–∞–ø—É—Å–∫–∞–µ–º production –æ–∫—Ä—É–∂–µ–Ω–∏–µ
                    docker-compose up -d
                    
                    REM –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
                    timeout /t 10 /nobreak
                    
                    REM –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
                    docker-compose ps
                    
                    REM –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ production
                    docker-compose exec -T web python manage.py migrate --noinput
                    
                    REM –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤ production
                    docker-compose exec -T web python manage.py collectstatic --noinput
                    
                    REM –°–æ–∑–¥–∞–µ–º —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è production
                    docker-compose exec -T web python manage.py shell -c "from django.contrib.auth.models import User; User.objects.create_superuser('admin', 'admin@example.com', 'admin123') if not User.objects.filter(username='admin').exists() else print('Production —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')"
                    
                    echo "‚úÖ –î–µ–ø–ª–æ–π –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω!"
                    echo "üåê Production —Å–µ—Ä–≤–µ—Ä: http://localhost:8000"
                    echo "üë§ Production –∞–¥–º–∏–Ω: admin/admin123"
                '''
            }
            post {
                success {
                    echo '‚úÖ –î–µ–ø–ª–æ–π –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!'
                }
                failure {
                    echo '‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–µ!'
                    echo '–û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è...'
                    bat '''
                        docker-compose down
                        docker-compose up -d
                    '''
                }
            }
        }
        
        stage('Health Check') {
            when {
                anyOf {
                    branch 'main'
                    branch 'dev'
                }
            }
            steps {
                echo 'üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è'
                script {
                    def branchName = env.BRANCH_NAME
                    def port = branchName == 'main' ? '8000' : '8001'
                    def maxAttempts = 5
                    def attempt = 1
                    
                    while (attempt <= maxAttempts) {
                        echo "–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxAttempts} –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–∞ –ø–æ—Ä—Ç—É ${port}..."
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º PowerShell –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ HTTP —Å—Ç–∞—Ç—É—Å–∞
                        def result = bat(
                            script: "powershell -Command \"try { $response = Invoke-WebRequest -Uri 'http://localhost:${port}/' -TimeoutSec 10; if ($response.StatusCode -eq 200) { exit 0 } else { exit 1 } } catch { exit 1 }\"",
                            returnStatus: true
                        )
                        
                        if (result == 0) {
                            echo "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤–æ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${port}"
                            break
                        } else {
                            echo "‚è≥ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–æ, –∂–¥–µ–º 10 —Å–µ–∫—É–Ω–¥..."
                            sleep(10)
                            attempt++
                        }
                    }
                    
                    if (attempt > maxAttempts) {
                        echo "‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫"
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo '–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞'
            archiveArtifacts artifacts: 'build_info.txt', fingerprint: true
        }
        success {
            echo '–°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
            script {
                def branchName = env.BRANCH_NAME
                def deployInfo = ""
                def serverUrl = ""
                
                if (branchName == 'main') {
                    deployInfo = "‚úÖ –î–µ–ø–ª–æ–π –≤ Production –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
                    serverUrl = "üåê Production: http://localhost:8000\nüë§ –ê–¥–º–∏–Ω: admin/admin123"
                } else if (branchName == 'dev') {
                    deployInfo = "‚úÖ –î–µ–ø–ª–æ–π –≤ Development –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
                    serverUrl = "üåê Development: http://localhost:8001\nüë§ –ê–¥–º–∏–Ω: dev_admin/dev123"
                } else {
                    deployInfo = "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
                }
                
                emailext (
                    subject: "‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∏ –¥–µ–ø–ª–æ–π: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: """–°–±–æ—Ä–∫–∞ ${env.BUILD_NUMBER} –≤ –ø—Ä–æ–µ–∫—Ç–µ ${env.JOB_NAME} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.
–í–µ—Ç–∫–∞: ${env.BRANCH_NAME}
–ö–æ–º–º–∏—Ç: ${env.GIT_COMMIT}

${deployInfo}
${serverUrl}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ.""",
                    to: "${env.CHANGE_AUTHOR_EMAIL}"
                )
            }
        }
        failure {
            echo '–°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π!'
            script {
                def branchName = env.BRANCH_NAME
                def deployInfo = ""
                
                if (branchName == 'main') {
                    deployInfo = "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ Production!"
                } else if (branchName == 'dev') {
                    deployInfo = "‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è –≤ Development!"
                } else {
                    deployInfo = "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏!"
                }
                
                emailext (
                    subject: "‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏/–¥–µ–ø–ª–æ—è: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                    body: """–°–±–æ—Ä–∫–∞ ${env.BUILD_NUMBER} –≤ –ø—Ä–æ–µ–∫—Ç–µ ${env.JOB_NAME} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π.
–í–µ—Ç–∫–∞: ${env.BRANCH_NAME}
–ö–æ–º–º–∏—Ç: ${env.GIT_COMMIT}

${deployInfo}

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Jenkins –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ.""",
                    to: "${env.CHANGE_AUTHOR_EMAIL}"
                )
            }
        }
    }
}

