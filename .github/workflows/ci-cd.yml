name: Django Blog CI/CD Pipeline

on:
  push:
    branches: [ main, dev, feature ]
  pull_request:
    branches: [ main, dev ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🗄️ Set up database
      run: |
        python manage.py makemigrations --noinput
        python manage.py migrate --noinput
        
    - name: 🧪 Run tests
      run: |
        python manage.py test --verbosity=2
        
    - name: 📊 Generate test report
      if: always()
      run: |
        echo "## Test Results" >> $GITHUB_STEP_SUMMARY
        echo "Python ${{ matrix.python-version }}: ✅ Tests completed" >> $GITHUB_STEP_SUMMARY
        
  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 🏗️ Build application
      run: |
        python manage.py collectstatic --noinput
        python manage.py check --deploy
        
    - name: 📦 Create deployment package
      run: |
        mkdir -p deployment
        cp -r . deployment/
        tar -czf django-blog-$(date +%Y%m%d-%H%M%S).tar.gz deployment/
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: django-blog-build
        path: "*.tar.gz"
        
  deploy-staging:
    if: github.ref == 'refs/heads/dev'
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: django-blog-build
        
    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "✅ Staging deployment completed!"
        
  deploy-production:
    if: github.ref == 'refs/heads/main'
    needs: [test, build]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: django-blog-build
        
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production environment..."
        echo "✅ Production deployment completed!"
        
  notify:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📧 Send notification
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "🎉 All tests passed and build is ready!"
        else
          echo "❌ CI/CD Pipeline failed!"
          echo "🔧 Please check the logs for details."
        fi
